{
  "name": "Services in Angular2",
  "tagline": "This project demonstrates how to use services in Angular2.",
  "body": "# Services In Angular2 [Updated]\r\n\r\nThis repo contains a small example that discusses use cases of **service**s and also compares **Angular2 services** with\r\n**Angular1 services**.\r\n\r\nWell, whenever we think about **service**s, two common use cases come into our minds:\r\n\r\n* Sharing data between the components of the application\r\n* Making `http` requests\r\n\r\nTo demonstrate above use cases, let us take a following example:\r\n\r\nSuppose, there is a cinema named as `ABC`. To keep our example simple, let us assume that cinema has `10` seats only and\r\nit sells tickets either through a **ticket window** or through a ticket booking site named **bookshow.com**.\r\n\r\nSo let's break our application into small parts:\r\n\r\n* `AppComponent` -> This will be the parent component of our application. This component would include various child\r\ncomponents.\r\n* `BookShowComponent` -> This component would be used by users booking tickets through **bookshow.com**.\r\n* `WindowComponent` -> Operator at ticket window/counter would use this component to book tickets.\r\n* `BookingService` -> This **service** gives the number of tickets available.\r\n* `MyTicketService` -> Ticket details are provided by this **service**.\r\n* `ticketData.json` -> This json contains hard coded ticket details for demonstration purpose. We will be making a `get`\r\n call to fetch data from this `json`.\r\n\r\nNow, let's add some code to these components in order to join these parts and make them work.\r\n\r\nHere is the `app.component.ts` file:\r\n\r\n```TypeScript\r\nimport {Component} from '@angular/core';\r\nimport {WindowComponent} from \"./window.component\";\r\nimport {BookShowComponent} from \"./book-show.component\";\r\n@Component({\r\n    selector: 'my-app',\r\n    template: `\r\n    <cinema-window></cinema-window>\r\n    <book-show></book-show>\r\n    `,\r\n    directives: [WindowComponent, BookShowComponent],\r\n})\r\n\r\nexport class AppComponent {\r\n}\r\n```\r\n\r\nIn the above code, we have simply added two child components i.e. `WindowComponent` and `BookShowComponent`.\r\n\r\nNow, let's have a look at these two components:\r\n\r\n**window.component.ts**\r\n```\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'cinema-window',\r\n    template: `\r\n    <div>\r\n        <h1>ABC Cinemas</h1>\r\n        <span>Hello Admin</span>\r\n        <p>Currently, Number of Tickets available are: {{ticketCount}}</p>\r\n        <button (click)=\"bookTicket()\">Book Ticket</button>\r\n        <button (click)=\"showTicket()\">Show Ticket</button>\r\n    </div>\r\n    `\r\n})\r\n\r\nexport class WindowComponent {\r\n    ticketCount = '';\r\n    bookTicket = () => {\r\n    };\r\n    showTicket = () => {\r\n    };\r\n}\r\n```\r\n\r\nWe have two functions : `bookTicket` and `showTicket` in the `WindowComponent`. As the name suggests `bookTicket` \r\ncomponent will be used to book tickets while `showTicket` component will be used to display the ticket details.\r\n\r\nWe also have a variable `ticketCount` which is empty so far but will be displaying the number of tickets available.\r\n\r\nBefore moving ahead, let's have a look at the `BookShowComponent` too:\r\n\r\n**book-show.component.ts**\r\n```TypeScript\r\nimport {Component} from 'angular2/core';\r\n\r\n@Component({\r\n    selector: 'book-show',\r\n    template: `\r\n    <div>\r\n        <h1>Welcome to bookshow.com</h1>\r\n        <span>Welcome User</span>\r\n        <p>Currently, Number of Tickets available are: {{ticketCount}}</p>\r\n        <button (click)=\"bookShow()\">Book Ticket</button>\r\n        <button (click)=\"showMyTicket()\">Show Ticket</button>\r\n    </div>\r\n    `\r\n})\r\n\r\nexport class BookShowComponent {\r\n    ticketCount = \";\r\n    bookShow = () => {\r\n    };\r\n    showMyTicket = () => {\r\n    }\r\n}\r\n```\r\n\r\n```\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'book-show',\r\n    template: `\r\n    <div>\r\n        <h1>Welcome to bookshow.com</h1>\r\n        <span>Welcome User</span>\r\n        <p>Currently, Number of Tickets available are: {{ticketCount}}</p>\r\n        <button (click)=\"bookShow()\">Book Ticket</button>\r\n        <button (click)=\"showMyTicket()\">Show Ticket</button>\r\n    </div>\r\n    `\r\n})\r\n\r\nexport class BookShowComponent {\r\n    ticketCount ';\r\n    bookShow = () => {\r\n    };\r\n    showMyTicket = () => {\r\n    };\r\n}\r\n```\r\n\r\nWell, `BookShowComponent` also looks pretty much the same.\r\n\r\nSo now its time to get into some more action. The first use case that we discussed for **service**s was **data sharing**\r\namongst the components.\r\n\r\nHence, we are making a booking **service** here, which will give the count of tickets available. Here is the **service**:\r\n\r\n**booking-service.ts**\r\n```TypeScript\r\nimport {Injectable} from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class BookingService {\r\n    totalTicketCount:number = 10;\r\n}\r\n```\r\n\r\nWe have hardcoded the ticket count in this **service** to `10`. We have named the above file as `booking-service.ts`. It\r\nis a common practice to name the **service** files with `-service` suffix.\r\n\r\nNow we want this **service** to be exposed to our `BookShowComponent` and the `WindowComponent`. To achieve let's add \r\nthe following lines to our `app.component.ts`:\r\n\r\n```import {BookingService} from \"./booking-service\";```\r\n\r\nAbove statement is an import statement while below code needs to be added to the `@Component` decorator.\r\n\r\n```providers: [BookingService]```\r\n\r\nNow, our `app.component.ts` would look like:\r\n\r\n```TypeScript\r\nimport {Component} from '@angular/core';\r\nimport {BookingService} from \"./booking-service\";\r\nimport {WindowComponent} from \"./window.component\";\r\nimport {BookShowComponent} from \"./book-show.component\";\r\n@Component({\r\n    selector: 'my-app',\r\n    template: `\r\n    <cinema-window></cinema-window>\r\n    <book-show></book-show>\r\n    `,\r\n    directives: [WindowComponent, BookShowComponent],\r\n    providers: [BookingService]\r\n})\r\n\r\nexport class AppComponent {\r\n}\r\n```\r\n\r\nAny **service** that we want to use, needs to be injected in `providers`. Now let's see how to use this **service** in \r\n`BookShowComponent` and `WindowComponent`.\r\n\r\n```TypeScript\r\nimport {Component} from '@angular/core';\r\nimport {BookingService} from \"./booking-service\";\r\n\r\n@Component({\r\n    selector: 'cinema-window',\r\n    template: `\r\n    <div>\r\n        <h1>ABC Cinemas</h1>\r\n        <span>Hello Admin</span>\r\n        <p>Currently, Number of Tickets available are: {{ticketCount}}</p>\r\n        <button (click)=\"bookTicket()\">Book Ticket</button>\r\n        <button (click)=\"showTicket()\">Show Ticket</button>\r\n    </div>\r\n    `\r\n})\r\nexport class WindowComponent {\r\n    constructor(public bookingService:BookingService) {\r\n    }\r\n    ticketCount = this.bookingService.totalTicketCount;\r\n    bookTicket = () => {\r\n        this.bookingService.totalTicketCount = this.bookingService.totalTicketCount - 1;\r\n        this.ticketCount = this.bookingService.totalTicketCount;\r\n    };\r\n    showTicket = () =>{\r\n    }\r\n}\r\n```\r\n\r\nAfter making similar changes to the `BookShowComponent`, it will look like this:\r\n\r\n```TypeScript\r\nimport {Component} from '@angular/core';\r\nimport {BookingService} from \"./booking-service\";\r\n\r\n@Component({\r\n    selector: 'book-show',\r\n    template: `\r\n    <div>\r\n        <h1>Welcome to bookshow.com</h1>\r\n        <span>Welcome User</span>\r\n        <p>Currently, Number of Tickets available are: {{ticketCount}}</p>\r\n        <button (click)=\"bookShow()\">Book Ticket</button>\r\n        <button (click)=\"showMyTicket()\">Show Ticket</button>\r\n    </div>\r\n    `\r\n})\r\n\r\nexport class BookShowComponent {\r\n    constructor(public bookingService:BookingService) {\r\n    }\r\n\r\n    ticketCount = this.bookingService.totalTicketCount;\r\n    bookShow = () => {\r\n        this.bookingService.totalTicketCount = this.bookingService.totalTicketCount - 1;\r\n        this.ticketCount = this.bookingService.totalTicketCount;\r\n    };\r\n    showMyTicket = () => {\r\n    }\r\n}\r\n```\r\n\r\nNow, let's discuss the changes that we have made:\r\n\r\n* We have imported the `BookingService` **service** into these two child components.\r\n* The `WindowComponent` or the `BookShowComponent` are requesting the injection of `BookingService` **object** by \r\ndeclaring the constructor argument with a type.\r\n\r\n```TypeScript\r\nconstructor(public bookingService:BookingService) {\r\n}\r\n```  \r\n  \r\nIn the `ticketCount` variable we have assigned the `totalTicketCount` which is given by the **service** `BookingService`.\r\n\r\nSo and once user clicks on the `Book Ticket` button in the `WindowComponent`, `bookShow()` function is called, where \r\n`totalTicketCount` shared by the `BookingService` is decremented by `1` and the new `bookingService.totalTicketCount` is\r\nthen assigned to `ticketCount` to update on the view.\r\n\r\nSupposing that `bookShow()` function has been called once in the `WindowComponent`, now the `totalTicketCount` would be \r\n`9`. Now, let's move to `BookShowComponent`, and click on the `Book Ticket` button here and you will notice that, \r\n`ticketCount` would now become `9-1` i.e. `8` here.\r\n\r\nLet's book another ticket through `WindowComponent` and see that available count would now change to `7`.\r\n\r\n> Note: Currently, there is one flaw in the application i.e. once we change the `totalTicketCount` from one component, \r\nit should get updated on the view of the second component, but this part is currently out of the scope of this post.\r\n\r\nNow, let's move on to our second use case, i.e. making `http` requests. To start with, here is your hardcoded json from \r\nwhich we would be fetching the ticket details.\r\n\r\n**ticketData.json**\r\n```JSON\r\n{\r\n  \"cinemaName\" : \"ABC Cinemas\",\r\n  \"showTime\" : \"9:30PM\",\r\n  \"date\": \"25-04-2016\",\r\n  \"seatNumber\": \"A1\",\r\n  \"ticketNumber\": 1362196405309\r\n}\r\n```\r\n\r\nNow, let's make `myTicket-service` which will make `http` request. Here we go:\r\n\r\n**myTicket-service.ts**\r\n```TypeScript\r\nimport {Injectable} from \"@angular2/core\";\r\nimport {Http} from '@angular/http';\r\n\r\n@Injectable()\r\nexport class MyTicketService {\r\n    constructor(public http:Http) {\r\n    }\r\n\r\n    getTicketData() {\r\n        return this.http.get(\"./ticketData.json\")\r\n            .map(function (response) {\r\n                return response.json()\r\n            });\r\n    }\r\n}\r\n```\r\n\r\nHere we are importing `Http` and have a look at the `getTicketData()` function where we are making our `http` request. \r\nResponse from the request is then fed into a map, where the response is being converted into  **JSON**.\r\n\r\nWell.. the story doesn't ends here. Now, let's go back to `WindowComponent`. We had made a `showTicket()` function here, \r\nwhich unfortunately as of now is not doing anything. So its time to make it work:\r\n\r\n```TypeScript\r\nimport {Component} from '@angular/core';\r\nimport {BookingService} from \"./booking-service\";\r\nimport {MyTicketService} from \"./myTicket-service\";\r\n\r\n@Component({\r\n    selector: 'cinema-window',\r\n    template: `\r\n    <div>\r\n        <h1>ABC Cinemas</h1>\r\n        <span>Hello Admin</span>\r\n        <p>Currently, Number of Tickets available are: {{ticketCount}}</p>\r\n        <button (click)=\"bookTicket()\">Book Ticket</button>\r\n        <button (click)=\"showTicket()\">Show Ticket</button>\r\n        <div class=\"box\" [hidden]=\"!dataAvailable\">\r\n            <span>Your Ticket Details:</span>\r\n            <ul class=\"li-style\">\r\n                <li>{{ticketData.cinemaName}}</li>\r\n                <li>{{ticketData.showTime}}</li>\r\n                <li>{{ticketData.date}}</li>\r\n                <li>{{ticketData.seatNumber}}</li>\r\n                <li>{{ticketData.ticketNumber}}</li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    `\r\n})\r\n\r\nexport class WindowComponent {\r\n    constructor(public bookingService:BookingService, public myTicketService:MyTicketService) {\r\n    }\r\n\r\n    ticketData = {};\r\n    dataAvailable:boolean = false;\r\n    ticketCount = this.bookingService.totalTicketCount;\r\n    errorMessage = '';\r\n    bookTicket = () => {\r\n        this.bookingService.totalTicketCount = this.bookingService.totalTicketCount - 1;\r\n        this.ticketCount = this.bookingService.totalTicketCount;\r\n    };\r\n    showTicket = () => {\r\n        this.myTicketService.getTicketData()\r\n            .subscribe(\r\n            (data) => {\r\n                this.ticketData = data,\r\n                    this.dataAvailable = true\r\n            },\r\n            (error) => {\r\n                this.errorMessage = error;\r\n            }\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nTo start from the top, changes that I have made in the `WindowComponent` are:\r\n\r\n* Imported the `MyTicketService`.\r\n* We have added `MyTicketService` as a constructor argument as done earlier for requesting the injection of \r\n    `MyTicketService` object.\r\n* There is a `ticketData` object, which will be used to display ticket details on the view. `dataAvailable` flag is also t\r\n    here which would be set to `true` once we successfully receive the data.\r\n* Now let's understand what is happening in the `showTicket()` function - We are calling the `getTicketData()` function \r\n    of `MyTicketService` which makes the `http` call. In the response we get an **Observable** which is parsed as \r\n    **JSON** in the **map** function which also returns an **Observable**. We then call **.subscribe()** method on this \r\n    **Observable** object. \r\n\r\n* **.subscribe()** method takes 3 **event handlers** as arguments - **onNext**, **onError** and **onCompleted**. It is \r\n    the **onNext** method which will receive the **HTTP** response data. As you can observe, we are populating \r\n    `ticketData` object in this method.\r\n\r\nLet's make the similar changes to `BookShowComponent`. So, `BookShowComponent` would look something like:\r\n\r\n```TypeScript\r\nimport {Component} from '@angular/core';\r\nimport {BookingService} from \"./booking-service\";\r\nimport {MyTicketService} from \"./myTicket-service\";\r\n\r\n@Component({\r\n    selector: 'book-show',\r\n    template: `\r\n    <div>\r\n        <h1>Welcome to bookshow.com</h1>\r\n        <span>Welcome User</span>\r\n        <p>Currently, Number of Tickets available are: {{ticketCount}}</p>\r\n        <button (click)=\"bookShow()\">Book Ticket</button>\r\n        <button (click)=\"showMyTicket()\">Show Ticket</button>\r\n        <div class=\"box\" [hidden]=\"!dataAvailable\">\r\n            <span>Your Ticket Details:</span>\r\n            <ul class=\"li-style\">\r\n            <li>{{ticketData.cinemaName}}</li>\r\n            <li>{{ticketData.showTime}}</li>\r\n            <li>{{ticketData.date}}</li>\r\n            <li>{{ticketData.seatNumber}}</li>\r\n            <li>{{ticketData.ticketNumber}}</li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    `\r\n})\r\n\r\nexport class BookShowComponent {\r\n    constructor(public bookingService:BookingService, public myTicketService:MyTicketService) {\r\n    }\r\n\r\n    ticketCount = this.bookingService.totalTicketCount;\r\n    ticketData = {};\r\n    dataAvailable:boolean = false;\r\n    errorMessage = '';\r\n    bookShow = () => {\r\n        this.bookingService.totalTicketCount = this.bookingService.totalTicketCount - 1;\r\n        this.ticketCount = this.bookingService.totalTicketCount;\r\n    };\r\n    showMyTicket = () => {\r\n        this.myTicketService.getTicketData()\r\n            .subscribe(\r\n            (data) => {\r\n                this.ticketData = data\r\n                    this.dataAvailable = true\r\n            }\r\n            , (error) => {\r\n                this.errorMessage = error;\r\n            }\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nNow, we need to make the one last change in order to make everything work. Here it is :\r\n\r\nIn our `main.ts`, we need to import `rxjs` and `http` so that they can be used throughout the application:\r\n\r\n**main.ts**\r\n```TypeScript\r\nimport {bootstrap}      from '@angular/platform-browser-dynamic';\r\nimport {AppComponent}   from './app.component';\r\nimport {HTTP_PROVIDERS} from '@angular/http';\r\nimport 'rxjs/Rx';\r\n\r\nbootstrap(AppComponent, [HTTP_PROVIDERS]);\r\n```\r\n\r\nWe are passing `HTTP_PROVIDERS` to `bootstrap()`. `http` module of **Angular2** exposes `HTTP_PROVIDERS` which has the \r\nproviders required for making `http` requests.\r\n\r\nYou can notice that we are also importing `rxjs`so now the question that is coming to our mind is what are `rxjs`. Well \r\nlet's have a look at these in brief.\r\n\r\n`rxjs` is a library by **Microsoft** which is being used in **Angular 2** for making async calls. So when we make a \r\ncall suppose `http.get()`, an `Observable` object is returned. `Observables` are though similar to `Promises` and help \r\nin managing `async` calls they still are different from **Promises**.\r\n\r\n* **Observables** emit multiple values.\r\n* They are treated as **Arrays** which means we can use **Array** like methods such as **map** , **reduce** etc.\r\n\r\nAlso, we need to make one last change that is registering our `MyTicketService` in the `app.component.ts`:\r\n\r\n```TypeScript\r\nimport {Component} from '@angular/core';\r\nimport {BookingService} from \"./booking-service\";\r\nimport {MyTicketService} from \"./myTicket-service\";\r\nimport {WindowComponent} from \"./window.component\";\r\nimport {BookShowComponent} from \"./book-show.component\";\r\n@Component({\r\n    selector: 'my-app',\r\n    template: `\r\n    <cinema-window></cinema-window>\r\n    <book-show></book-show>\r\n    `,\r\n    directives: [WindowComponent, BookShowComponent],\r\n    providers: [BookingService, MyTicketService]\r\n})\r\n\r\nexport class AppComponent {\r\n}\r\n```\r\n\r\nWell, now if you run the code, you would be able to get the ticket details.\r\n\r\nBefore we end this blog it would be important for us to discuss the major difference between the **Services in Angular \r\n1.x** and **Services in Angular2**:\r\n\r\n**Services in Angular 1.x** are **singleton** i.e. you would get one **object** for the entire application but that is \r\nnot the case in **Angular2**. You had seen that in our `app.ts`, we had done:\r\n\r\n`providers: [BookingService, MyTicketService]`\r\n\r\nIn the above line we had registered our **providers** `BookingService` and `MyTicketService`. Since both of these \r\n**providers** are being used all throughout the application, also we had to share data between our components i.e. between both \r\nthe child components, the ideal place to register our both the providers was in `AppComponent`. Had we registered our \r\n**provider** separately in each component, then we would have got the separate instance of that **provider** in each \r\ncomponent. \r\n\r\nSo now suppose that original `totalTicketCount` is `10` and booking the ticket from `WindowComponent` would have \r\ndecreased the count to `9` and then on making a booking from `BookShowComponent`, the count would change to `9`. `9`? But \r\nwhy `9`? Because there would be different instances of `BookingService` in the `WindowComponent` and the `BookShowComponent`.\r\n\r\nHence, this is the major difference between the services in **Angular 1.x and Angular2**.\r\n\r\nFollow Me\r\n---\r\n[Github](https://github.com/NamitaMalik)\r\n\r\n[Twitter](https://twitter.com/namita13_04)\r\n\r\n[LinkedIn](https://in.linkedin.com/in/namita-malik-a7885b23)\r\n\r\n[More Blogs By Me](https://namitamalik.github.io/)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}